@using System.Text.RegularExpressions
<form class="border rounded p-2">
    <div class="form-row align-items-center">
        <div class="col-auto">
            <label for="ipaddress">IP address</label>
            <div class="input-group">
                <input id="ipaddress" type="text" class="form-control @ValidMarker" @oninput="OnInputIpAddress" placeholder="192.168.255.254"/>
            </div>
        </div>
        <div class="col-auto">
            <label for="subnetbits">Network bits</label>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">/</div>
                </div>
                <select id="subnetbits" class="custom-select" @bind="SelectedNetworkBitCount">
                    @foreach (var subnetMask in SubnetMasks)
                    {
                        <option value="@subnetMask.NetwortBitCount">@subnetMask.NetwortBitCount</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-auto">
            <label for="subnetmask">Subnet mask</label>
            <div class="input-group">
                <select id="subnetmask" class="custom-select" @bind="SelectedNetworkBitCount">
                    @foreach (var subnetMask in SubnetMasks)
                    {
                        <option value="@subnetMask.NetwortBitCount">@subnetMask.ToString()</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-auto">
            <label for="useableHosts">Usable addresses</label>
            <div class="input-group">
                <select id="useableHosts" class="custom-select" @bind="SelectedNetworkBitCount">
                    @foreach (var subnetMask in SubnetMasks)
                    {
                        <option value="@subnetMask.NetwortBitCount">@subnetMask.UsableHostAddressCount @subnetMask.HostAddressRemark</option>
                    }
                </select>
            </div>
        </div>
    </div>
    @Debug
</form>

@code
{
    private byte SelectedNetworkBitCount { get; set; }
    private IReadOnlyList<SubnetMask> SubnetMasks { get; set; }
    private string ValidMarker { get; set; }

    private static readonly Regex IpAddressRegex = new Regex(@"^(?<A>\d{1,3})\.(?<B>\d{1,3})\.(?<C>\d{1,3})\.(?<D>\d{1,3})$");

    private bool IsValid
    {
        set => ValidMarker = value ? "is-valid" : "is-invalid";
    }

    private string Debug { get; set; }

    protected override Task OnInitializedAsync()
    {
        IsValid = false;
        SelectedNetworkBitCount = 24;
        SubnetMasks = SubnetMask.AllSubnetMasks();
        return base.OnInitializedAsync();
    }



    private void OnInputIpAddress(ChangeEventArgs e)
    {
        IsValid = false;
        var input = e.Value.ToString().Trim();

        var match = IpAddressRegex.Match(input);
        if (!match.Success)
        {
            return;
        }

        if(!byte.TryParse(match.Groups["A"].Value, out var octetA))
        {
            return;
        }
        if (!byte.TryParse(match.Groups["B"].Value, out var octetB))
        {
            return;
        }
        if (!byte.TryParse(match.Groups["C"].Value, out var octetC))
        {
            return;
        }
        if (!byte.TryParse(match.Groups["D"].Value, out var octetD))
        {
            return;
        }


        Debug = $"{octetA}.{octetB}.{octetC}.{octetD}";






        IsValid = true;

    }

}