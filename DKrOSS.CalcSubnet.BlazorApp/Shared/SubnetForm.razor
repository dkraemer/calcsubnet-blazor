<form class="border rounded p-2">
    <div class="form-row align-items-center">
        <div class="col-auto">
            <label for="ipaddress">IP address</label>
            <div class="input-group">
                <input id="ipaddress" type="text" class="form-control @InputIpAddressCss" @oninput="OnInputIpAddress" placeholder="192.168.255.254"/>
            </div>
        </div>
        <div class="col-auto">
            <label for="subnetbits">Network bits</label>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">/</div>
                </div>
                <select id="subnetbits" class="custom-select" @bind="SelectedNetworkBitCount">
                    @foreach (var subnetMask in SubnetMasks)
                    {
                        <option value="@subnetMask.NetwortBitCount">@subnetMask.NetwortBitCount</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-auto">
            <label for="subnetmask">Subnet mask</label>
            <div class="input-group">
                <select id="subnetmask" class="custom-select" @bind="SelectedNetworkBitCount">
                    @foreach (var subnetMask in SubnetMasks)
                    {
                        <option value="@subnetMask.NetwortBitCount">@subnetMask.ToString()</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-auto">
            <label for="useableHosts">Usable addresses</label>
            <div class="input-group">
                <select id="useableHosts" class="custom-select" @bind="SelectedNetworkBitCount">
                    @foreach (var subnetMask in SubnetMasks)
                    {
                        <option value="@subnetMask.NetwortBitCount">@subnetMask.UsableHostAddressCount @subnetMask.HostAddressRemark</option>
                    }
                </select>
            </div>
        </div>
    </div>
</form>

@code
{
        private const string ValidInputCssClass = "is-valid";
        private const string InvalidInputCssClass = "is-invalid";

    private string InputIpAddressCss { get; set; }
    private byte SelectedNetworkBitCount { get; set; }
    private IReadOnlyList<SubnetMask> SubnetMasks { get; set; }

    [Parameter]
    public uint? IpAddress { get; set; }

    [Parameter]
    public EventCallback<uint?> IpAddressChanged { get; set; }

    protected override Task OnInitializedAsync()
    {
        InputIpAddressCss = InvalidInputCssClass;
        SelectedNetworkBitCount = 24;
        SubnetMasks = SubnetMask.AllSubnetMasks();
        return base.OnInitializedAsync();
    }

    private Task OnInputIpAddress(ChangeEventArgs e)
    {
        var isIpAddressValid = DotDecimalUtils.TryParse(e.Value, out var parsedIpAddress);
        IpAddress = parsedIpAddress;

        InputIpAddressCss = !isIpAddressValid ? InvalidInputCssClass : ValidInputCssClass;

        return IpAddressChanged.InvokeAsync(IpAddress);
    }
}